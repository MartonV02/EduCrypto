// <auto-generated />
using System;
using Application.Common;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Application.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220405102850_EduCrypto_v4.1")]
    partial class EduCrypto_v41
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.13");

            modelBuilder.Entity("Application.Group.GroupModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("finishDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("isFinished")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("startBudget")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("startDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("name")
                        .IsUnique();

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            finishDate = new DateTime(2022, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isFinished = false,
                            name = "test",
                            startBudget = 100m,
                            startDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Application.UserCrypto.UserCryptoModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("cryptoSymbol")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("cryptoValue")
                        .HasColumnType("decimal(65,30)");

                    b.Property<bool>("isFavourite")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("userForGroupsModelId")
                        .HasColumnType("int");

                    b.Property<int>("userHandlingModelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("userForGroupsModelId");

                    b.HasIndex("userHandlingModelId");

                    b.ToTable("UserCryptos");
                });

            modelBuilder.Entity("Application.UserForGroups.UserForGroupsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("accesLevel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("groupModelId")
                        .HasColumnType("int");

                    b.Property<string>("groupWalletNumber")
                        .HasMaxLength(34)
                        .HasColumnType("varchar(34)");

                    b.Property<decimal>("money")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("userHandlingModelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("groupModelId");

                    b.HasIndex("groupWalletNumber")
                        .IsUnique();

                    b.HasIndex("userHandlingModelId");

                    b.ToTable("UserForGroups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            accesLevel = "creator",
                            groupModelId = 1,
                            money = 100m,
                            userHandlingModelId = 1
                        },
                        new
                        {
                            Id = 2,
                            accesLevel = "member",
                            groupModelId = 1,
                            money = 100m,
                            userHandlingModelId = 2
                        });
                });

            modelBuilder.Entity("Application.UserHandling.UserHandlingModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("birthDate")
                        .HasColumnType("datetime");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("fullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("moneyDollar")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("profilePictureUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("walletNumber")
                        .HasMaxLength(34)
                        .HasColumnType("varchar(34)");

                    b.Property<int>("xpLevel")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("email")
                        .IsUnique();

                    b.HasIndex("userName")
                        .IsUnique();

                    b.HasIndex("walletNumber")
                        .IsUnique();

                    b.ToTable("UserHandlings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PasswordHash = "wSg08QMfZJchTyfUQy8mUXrUlBVsuI1RK9sdxLV9staSo9+iaaGbCgoqD9fWoqiF4zyDnJPCBtowoYc5KEftJw==",
                            birthDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            email = "test@test.com",
                            fullName = "Test Elek",
                            moneyDollar = 1000m,
                            userName = "test",
                            xpLevel = 0
                        },
                        new
                        {
                            Id = 2,
                            PasswordHash = "eCf8a+CB6qaYDSy/BEj0sRgzVo4OWseUL/qLhw1a9hWeVX3qNK4DUis3RJif6pFYuur1t0ttU95UsJMe0eBJSg==",
                            birthDate = new DateTime(2049, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            email = "replica@wallas.com",
                            fullName = "Officer K",
                            moneyDollar = 1000m,
                            userName = "replica",
                            xpLevel = 0
                        });
                });

            modelBuilder.Entity("Application.UserTradeHistory.UserTradeHistoryModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("actualPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("boughtCryptoSymbol")
                        .HasColumnType("longtext");

                    b.Property<decimal>("boughtValue")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("spentCryptoSymbol")
                        .HasColumnType("longtext");

                    b.Property<decimal>("spentValue")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime?>("tradeDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("userForGroupsModelId")
                        .HasColumnType("int");

                    b.Property<int>("userHandlingModelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("userForGroupsModelId");

                    b.HasIndex("userHandlingModelId");

                    b.ToTable("UserTradeHistories");
                });

            modelBuilder.Entity("Application.UserCrypto.UserCryptoModel", b =>
                {
                    b.HasOne("Application.UserForGroups.UserForGroupsModel", "userForGroupsModel")
                        .WithMany()
                        .HasForeignKey("userForGroupsModelId");

                    b.HasOne("Application.UserHandling.UserHandlingModel", "userHandlingModel")
                        .WithMany()
                        .HasForeignKey("userHandlingModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("userForGroupsModel");

                    b.Navigation("userHandlingModel");
                });

            modelBuilder.Entity("Application.UserForGroups.UserForGroupsModel", b =>
                {
                    b.HasOne("Application.Group.GroupModel", "groupModel")
                        .WithMany()
                        .HasForeignKey("groupModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Application.UserHandling.UserHandlingModel", "userHandlingModel")
                        .WithMany()
                        .HasForeignKey("userHandlingModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("groupModel");

                    b.Navigation("userHandlingModel");
                });

            modelBuilder.Entity("Application.UserTradeHistory.UserTradeHistoryModel", b =>
                {
                    b.HasOne("Application.UserForGroups.UserForGroupsModel", "userForGroupsModel")
                        .WithMany()
                        .HasForeignKey("userForGroupsModelId");

                    b.HasOne("Application.UserHandling.UserHandlingModel", "userHandlingModel")
                        .WithMany()
                        .HasForeignKey("userHandlingModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("userForGroupsModel");

                    b.Navigation("userHandlingModel");
                });
#pragma warning restore 612, 618
        }
    }
}
